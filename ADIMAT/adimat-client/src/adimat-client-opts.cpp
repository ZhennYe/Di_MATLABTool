/*
  File autogenerated by gengetopt version 2.22.4
  generated with the following command:
  gengetopt -F adimat-client-opts -c cpp -H hh -C --no-handle-version --no-handle-help --no-handle-error -i adimat-client-opts.ggo --unamed-opts 

  The developers of gengetopt consider the fixed text that goes in all
  gengetopt output files to be in the public domain:
  we make no copyright claims on it.
*/

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#ifndef FIX_UNUSED
#define FIX_UNUSED(X) (void) (X) /* avoid warnings for unused params */
#endif

#include <getopt.h>

#include "adimat-client-opts.hh"

const char *gengetopt_args_info_purpose = "Send Matlab .m files to ADiMat server for differentiation or transformation";

const char *gengetopt_args_info_usage = "Usage: adimat-client [-F|-f|-r] [-i var1,var2] [-d res1,res2] m-file {m-file}";

const char *gengetopt_args_info_description = "Matlab .m files are send to the ADiMat server via HTTPS protocol. For \ninteractive use through a web form, visit \nhttps://adimat.sc.informatik.tu-darmstadt.de/. Options can be given in a \nconfiguration file, ${HOME}/.adimat/client-options, but command line options \noverride those.";

const char *gengetopt_args_info_full_help[] = {
  "  -h, --help                    Print help and exit",
  "      --full-help               Print help, including hidden options, and exit",
  "      --version                 Print version and exit",
  "      --long-version            Print long version  (default=off)",
  "  -V, --verbose[=number]        Set the level of status messages. 0 (no output \n                                  at all) upto 20 (most chatty)  (default=`5')",
  "      --debug                   Enable debugging: save messages and log to \n                                  directory ./adimat  (default=off)",
  "      --user-dir=path           Directory for client user configuration and \n                                  state  (default=`${HOME}/.adimat')",
  "\n Mode: classic fm\n  Classic ADiMat Forward Mode",
  "  -F, --classic-forward         Differentiate in Forward Mode  (default=off)",
  "\n Mode: fm\n  Differentiation done in direction of program flow",
  "  -f, --forward                 Differentiate in Forward Mode  (default=off)",
  "\n Mode: taylor\n  Differentiation done in direction of program flow, Taylor mode",
  "  -t, --taylor                  Differentiate in Taylor Forward Mode  \n                                  (default=off)",
  "\n Mode: rm\n  Differentiation done in reverse direction of program flow",
  "  -r, --reverse                 Differentiate in Reverse Mode  (default=off)",
  "\n Mode: Toolchain\n  Run a predefined chain of XSLT transformations",
  "  -T, --tool-chain=name         Run named toolchain",
  "      --list-tool-chains        List available toolchains  (default=off)",
  "\n Mode: version\n  Get server version",
  "      --server-version          Get server version  (default=off)",
  "\nOptions and Flags:",
  "      --stdout                  Output received files to console  (default=off)",
  "  -o, --output=file             Output received files to file",
  "      --interactive=0|1         Do not ask before sending files over the net  \n                                  (default=`0')",
  "  -p, --output-dir=directory    Write received files to directory  \n                                  (default=`.')",
  "  -I, --include-dir=directory   Add directory to search path",
  "  -e, --encoding=coding         Specify encoding of input files  \n                                  (default=`utf-8')",
  "  -M, --dependency-list=file    Write list of dependencies to file",
  "  -b, --unbound                 Don't ask for more files if unbound \n                                  identifieres  (default=off)",
  "\nAD Transformation:",
  "  -i, --independent=commalist   Set independent variables",
  "  -d, --dependent=commalist     Set independent variables",
  "  -s, --transformation-param=name=value\n                                Set a transformation parameter",
  "  -A, --all-active              Ignore activity analysis and consider all \n                                  variables active (rm/fm only)  (default=off)",
  "  -x, --xslt-processor=name     Set XSLT processor (xsltproc or saxon-xslt)",
  "  -v, --vector                  Create code for classless vector mode  \n                                  (default=off)",
  "  -c, --comments[=[0, ..., 5]]  Add comments inserted into the code. Repeat for \n                                  more comments  (default=`0')",
  "\nNetworking:",
  "      --server=hostname         The URL to connect to  \n                                  (default=`https://adimat.sc.informatik.tu-darmstadt.de/')",
  "      --hostname=hostname       The host to connect to  \n                                  (default=`adimat.sc.informatik.tu-darmstadt.de')",
  "      --cgi-path=URI            The relative path of the CGI on server (without \n                                  base path)  \n                                  (default=`cgi-bin/adimat-server.fcgi')",
  "      --request-path=URI        The relative path of the CGI on server  \n                                  (default=`/cgi-bin/adimat-server.fcgi')",
  "  -P, --port=number             Port to connect to  (default=`443')",
  "      --numeric-host            No DNS resolution  (default=off)",
  "      --numeric-port            No resolution of service names  (default=off)",
  "      --no-canonical-host-name  Don't retrieve canonical host name  \n                                  (default=off)",
  "      --ipv4                    Use IPv4 only  (default=off)",
  "      --ipv6                    Use IPv6 only  (default=off)",
  "      --cgi-param=name=value    Set a CGI parameter",
  "      --no-ssl                  Do not use SSL  (default=off)",
  "      --seed-file=filename      Where to read SSL random seed from",
  "      --trust-store=filename    Where to read certificates from  \n                                  (default=`${HOME}/.adimat/adimat.pem')",
  "      --ciphers=filename        Which ciphers to use, see ciphers(1) for \n                                  details  (default=`HIGH')",
  "      --check-certificate       Whether to check the server's certificate  \n                                  (default=on)",
  "      --check-certificate-name  Whether to check the server's certificate \n                                  common name (CN)  (default=on)",
  "      --max-reconnect=integer   How often to try to reconnect  (default=`10')",
  "      --http-version=version    Set HTTP protocol version  (default=`1.1')",
  "      --request-method=GET|POST Set HTTP request method  (default=`POST')",
  "      --header=HTTP Header      Send additional HTTP header",
  "      --winsock-major=number    Winsock DLL major version number  (default=`2')",
  "      --winsock-minor=number    Winsock DLL minor version number  (default=`2')",
    0
};

static void
init_help_array(void)
{
  gengetopt_args_info_help[0] = gengetopt_args_info_full_help[0];
  gengetopt_args_info_help[1] = gengetopt_args_info_full_help[1];
  gengetopt_args_info_help[2] = gengetopt_args_info_full_help[2];
  gengetopt_args_info_help[3] = gengetopt_args_info_full_help[3];
  gengetopt_args_info_help[4] = gengetopt_args_info_full_help[4];
  gengetopt_args_info_help[5] = gengetopt_args_info_full_help[5];
  gengetopt_args_info_help[6] = gengetopt_args_info_full_help[7];
  gengetopt_args_info_help[7] = gengetopt_args_info_full_help[8];
  gengetopt_args_info_help[8] = gengetopt_args_info_full_help[9];
  gengetopt_args_info_help[9] = gengetopt_args_info_full_help[10];
  gengetopt_args_info_help[10] = gengetopt_args_info_full_help[11];
  gengetopt_args_info_help[11] = gengetopt_args_info_full_help[12];
  gengetopt_args_info_help[12] = gengetopt_args_info_full_help[13];
  gengetopt_args_info_help[13] = gengetopt_args_info_full_help[14];
  gengetopt_args_info_help[14] = gengetopt_args_info_full_help[15];
  gengetopt_args_info_help[15] = gengetopt_args_info_full_help[16];
  gengetopt_args_info_help[16] = gengetopt_args_info_full_help[17];
  gengetopt_args_info_help[17] = gengetopt_args_info_full_help[18];
  gengetopt_args_info_help[18] = gengetopt_args_info_full_help[19];
  gengetopt_args_info_help[19] = gengetopt_args_info_full_help[20];
  gengetopt_args_info_help[20] = gengetopt_args_info_full_help[21];
  gengetopt_args_info_help[21] = gengetopt_args_info_full_help[22];
  gengetopt_args_info_help[22] = gengetopt_args_info_full_help[23];
  gengetopt_args_info_help[23] = gengetopt_args_info_full_help[24];
  gengetopt_args_info_help[24] = gengetopt_args_info_full_help[25];
  gengetopt_args_info_help[25] = gengetopt_args_info_full_help[26];
  gengetopt_args_info_help[26] = gengetopt_args_info_full_help[27];
  gengetopt_args_info_help[27] = gengetopt_args_info_full_help[28];
  gengetopt_args_info_help[28] = gengetopt_args_info_full_help[29];
  gengetopt_args_info_help[29] = gengetopt_args_info_full_help[30];
  gengetopt_args_info_help[30] = gengetopt_args_info_full_help[31];
  gengetopt_args_info_help[31] = gengetopt_args_info_full_help[32];
  gengetopt_args_info_help[32] = gengetopt_args_info_full_help[33];
  gengetopt_args_info_help[33] = gengetopt_args_info_full_help[34];
  gengetopt_args_info_help[34] = gengetopt_args_info_full_help[35];
  gengetopt_args_info_help[35] = gengetopt_args_info_full_help[36];
  gengetopt_args_info_help[36] = gengetopt_args_info_full_help[37];
  gengetopt_args_info_help[37] = gengetopt_args_info_full_help[38];
  gengetopt_args_info_help[38] = 0; 
  
}

const char *gengetopt_args_info_help[39];

typedef enum {ARG_NO
  , ARG_FLAG
  , ARG_STRING
  , ARG_INT
} cmdline_parser_arg_type;

static
void clear_given (struct gengetopt_args_info *args_info);
static
void clear_args (struct gengetopt_args_info *args_info);

static int
cmdline_parser_internal (int argc, char **argv, struct gengetopt_args_info *args_info,
                        struct cmdline_parser_params *params, const char *additional_error);

static int
cmdline_parser_required2 (struct gengetopt_args_info *args_info, const char *prog_name, const char *additional_error);
struct line_list
{
  char * string_arg;
  struct line_list * next;
};

static struct line_list *cmd_line_list = 0;
static struct line_list *cmd_line_list_tmp = 0;

static void
free_cmd_list(void)
{
  /* free the list of a previous call */
  if (cmd_line_list)
    {
      while (cmd_line_list) {
        cmd_line_list_tmp = cmd_line_list;
        cmd_line_list = cmd_line_list->next;
        free (cmd_line_list_tmp->string_arg);
        free (cmd_line_list_tmp);
      }
    }
}


static char *
gengetopt_strdup (const char *s);

static
void clear_given (struct gengetopt_args_info *args_info)
{
  args_info->help_given = 0 ;
  args_info->full_help_given = 0 ;
  args_info->version_given = 0 ;
  args_info->long_version_given = 0 ;
  args_info->verbose_given = 0 ;
  args_info->debug_given = 0 ;
  args_info->user_dir_given = 0 ;
  args_info->classic_forward_given = 0 ;
  args_info->forward_given = 0 ;
  args_info->taylor_given = 0 ;
  args_info->reverse_given = 0 ;
  args_info->tool_chain_given = 0 ;
  args_info->list_tool_chains_given = 0 ;
  args_info->server_version_given = 0 ;
  args_info->stdout_given = 0 ;
  args_info->output_given = 0 ;
  args_info->interactive_given = 0 ;
  args_info->output_dir_given = 0 ;
  args_info->include_dir_given = 0 ;
  args_info->encoding_given = 0 ;
  args_info->dependency_list_given = 0 ;
  args_info->unbound_given = 0 ;
  args_info->independent_given = 0 ;
  args_info->dependent_given = 0 ;
  args_info->transformation_param_given = 0 ;
  args_info->all_active_given = 0 ;
  args_info->xslt_processor_given = 0 ;
  args_info->vector_given = 0 ;
  args_info->comments_given = 0 ;
  args_info->server_given = 0 ;
  args_info->hostname_given = 0 ;
  args_info->cgi_path_given = 0 ;
  args_info->request_path_given = 0 ;
  args_info->port_given = 0 ;
  args_info->numeric_host_given = 0 ;
  args_info->numeric_port_given = 0 ;
  args_info->no_canonical_host_name_given = 0 ;
  args_info->ipv4_given = 0 ;
  args_info->ipv6_given = 0 ;
  args_info->cgi_param_given = 0 ;
  args_info->no_ssl_given = 0 ;
  args_info->seed_file_given = 0 ;
  args_info->trust_store_given = 0 ;
  args_info->ciphers_given = 0 ;
  args_info->check_certificate_given = 0 ;
  args_info->check_certificate_name_given = 0 ;
  args_info->max_reconnect_given = 0 ;
  args_info->http_version_given = 0 ;
  args_info->request_method_given = 0 ;
  args_info->header_given = 0 ;
  args_info->winsock_major_given = 0 ;
  args_info->winsock_minor_given = 0 ;
  args_info->Toolchain_mode_counter = 0 ;
  args_info->classic_fm_mode_counter = 0 ;
  args_info->fm_mode_counter = 0 ;
  args_info->rm_mode_counter = 0 ;
  args_info->taylor_mode_counter = 0 ;
  args_info->version_mode_counter = 0 ;
}

static
void clear_args (struct gengetopt_args_info *args_info)
{
  FIX_UNUSED (args_info);
  args_info->long_version_flag = 0;
  args_info->verbose_arg = NULL;
  args_info->verbose_orig = NULL;
  args_info->debug_flag = 0;
  args_info->user_dir_arg = gengetopt_strdup ("${HOME}/.adimat");
  args_info->user_dir_orig = NULL;
  args_info->classic_forward_flag = 0;
  args_info->forward_flag = 0;
  args_info->taylor_flag = 0;
  args_info->reverse_flag = 0;
  args_info->tool_chain_arg = NULL;
  args_info->tool_chain_orig = NULL;
  args_info->list_tool_chains_flag = 0;
  args_info->server_version_flag = 0;
  args_info->stdout_flag = 0;
  args_info->output_arg = NULL;
  args_info->output_orig = NULL;
  args_info->interactive_arg = NULL;
  args_info->interactive_orig = NULL;
  args_info->output_dir_arg = NULL;
  args_info->output_dir_orig = NULL;
  args_info->include_dir_arg = NULL;
  args_info->include_dir_orig = NULL;
  args_info->encoding_arg = gengetopt_strdup ("utf-8");
  args_info->encoding_orig = NULL;
  args_info->dependency_list_arg = NULL;
  args_info->dependency_list_orig = NULL;
  args_info->unbound_flag = 0;
  args_info->independent_arg = NULL;
  args_info->independent_orig = NULL;
  args_info->dependent_arg = NULL;
  args_info->dependent_orig = NULL;
  args_info->transformation_param_arg = NULL;
  args_info->transformation_param_orig = NULL;
  args_info->all_active_flag = 0;
  args_info->xslt_processor_arg = NULL;
  args_info->xslt_processor_orig = NULL;
  args_info->vector_flag = 0;
  args_info->comments_arg = NULL;
  args_info->comments_orig = NULL;
  args_info->server_arg = gengetopt_strdup ("https://adimat.sc.informatik.tu-darmstadt.de/");
  args_info->server_orig = NULL;
  args_info->hostname_arg = gengetopt_strdup ("adimat.sc.informatik.tu-darmstadt.de");
  args_info->hostname_orig = NULL;
  args_info->cgi_path_arg = gengetopt_strdup ("cgi-bin/adimat-server.fcgi");
  args_info->cgi_path_orig = NULL;
  args_info->request_path_arg = gengetopt_strdup ("/cgi-bin/adimat-server.fcgi");
  args_info->request_path_orig = NULL;
  args_info->port_arg = gengetopt_strdup ("443");
  args_info->port_orig = NULL;
  args_info->numeric_host_flag = 0;
  args_info->numeric_port_flag = 0;
  args_info->no_canonical_host_name_flag = 0;
  args_info->ipv4_flag = 0;
  args_info->ipv6_flag = 0;
  args_info->cgi_param_arg = NULL;
  args_info->cgi_param_orig = NULL;
  args_info->no_ssl_flag = 0;
  args_info->seed_file_arg = NULL;
  args_info->seed_file_orig = NULL;
  args_info->trust_store_arg = gengetopt_strdup ("${HOME}/.adimat/adimat.pem");
  args_info->trust_store_orig = NULL;
  args_info->ciphers_arg = gengetopt_strdup ("HIGH");
  args_info->ciphers_orig = NULL;
  args_info->check_certificate_flag = 1;
  args_info->check_certificate_name_flag = 1;
  args_info->max_reconnect_arg = 10;
  args_info->max_reconnect_orig = NULL;
  args_info->http_version_arg = gengetopt_strdup ("1.1");
  args_info->http_version_orig = NULL;
  args_info->request_method_arg = gengetopt_strdup ("POST");
  args_info->request_method_orig = NULL;
  args_info->header_arg = NULL;
  args_info->header_orig = NULL;
  args_info->winsock_major_arg = 2;
  args_info->winsock_major_orig = NULL;
  args_info->winsock_minor_arg = 2;
  args_info->winsock_minor_orig = NULL;
  
}

static
void init_args_info(struct gengetopt_args_info *args_info)
{

  init_help_array(); 
  args_info->help_help = gengetopt_args_info_full_help[0] ;
  args_info->full_help_help = gengetopt_args_info_full_help[1] ;
  args_info->version_help = gengetopt_args_info_full_help[2] ;
  args_info->long_version_help = gengetopt_args_info_full_help[3] ;
  args_info->verbose_help = gengetopt_args_info_full_help[4] ;
  args_info->verbose_min = 0;
  args_info->verbose_max = 0;
  args_info->debug_help = gengetopt_args_info_full_help[5] ;
  args_info->user_dir_help = gengetopt_args_info_full_help[6] ;
  args_info->classic_forward_help = gengetopt_args_info_full_help[8] ;
  args_info->forward_help = gengetopt_args_info_full_help[10] ;
  args_info->taylor_help = gengetopt_args_info_full_help[12] ;
  args_info->reverse_help = gengetopt_args_info_full_help[14] ;
  args_info->tool_chain_help = gengetopt_args_info_full_help[16] ;
  args_info->list_tool_chains_help = gengetopt_args_info_full_help[17] ;
  args_info->server_version_help = gengetopt_args_info_full_help[19] ;
  args_info->stdout_help = gengetopt_args_info_full_help[21] ;
  args_info->output_help = gengetopt_args_info_full_help[22] ;
  args_info->interactive_help = gengetopt_args_info_full_help[23] ;
  args_info->interactive_min = 0;
  args_info->interactive_max = 0;
  args_info->output_dir_help = gengetopt_args_info_full_help[24] ;
  args_info->output_dir_min = 0;
  args_info->output_dir_max = 0;
  args_info->include_dir_help = gengetopt_args_info_full_help[25] ;
  args_info->include_dir_min = 0;
  args_info->include_dir_max = 0;
  args_info->encoding_help = gengetopt_args_info_full_help[26] ;
  args_info->dependency_list_help = gengetopt_args_info_full_help[27] ;
  args_info->unbound_help = gengetopt_args_info_full_help[28] ;
  args_info->independent_help = gengetopt_args_info_full_help[30] ;
  args_info->dependent_help = gengetopt_args_info_full_help[31] ;
  args_info->transformation_param_help = gengetopt_args_info_full_help[32] ;
  args_info->transformation_param_min = 0;
  args_info->transformation_param_max = 0;
  args_info->all_active_help = gengetopt_args_info_full_help[33] ;
  args_info->xslt_processor_help = gengetopt_args_info_full_help[34] ;
  args_info->vector_help = gengetopt_args_info_full_help[35] ;
  args_info->comments_help = gengetopt_args_info_full_help[36] ;
  args_info->comments_min = 0;
  args_info->comments_max = 0;
  args_info->server_help = gengetopt_args_info_full_help[38] ;
  args_info->hostname_help = gengetopt_args_info_full_help[39] ;
  args_info->cgi_path_help = gengetopt_args_info_full_help[40] ;
  args_info->request_path_help = gengetopt_args_info_full_help[41] ;
  args_info->port_help = gengetopt_args_info_full_help[42] ;
  args_info->numeric_host_help = gengetopt_args_info_full_help[43] ;
  args_info->numeric_port_help = gengetopt_args_info_full_help[44] ;
  args_info->no_canonical_host_name_help = gengetopt_args_info_full_help[45] ;
  args_info->ipv4_help = gengetopt_args_info_full_help[46] ;
  args_info->ipv6_help = gengetopt_args_info_full_help[47] ;
  args_info->cgi_param_help = gengetopt_args_info_full_help[48] ;
  args_info->cgi_param_min = 0;
  args_info->cgi_param_max = 0;
  args_info->no_ssl_help = gengetopt_args_info_full_help[49] ;
  args_info->seed_file_help = gengetopt_args_info_full_help[50] ;
  args_info->trust_store_help = gengetopt_args_info_full_help[51] ;
  args_info->ciphers_help = gengetopt_args_info_full_help[52] ;
  args_info->check_certificate_help = gengetopt_args_info_full_help[53] ;
  args_info->check_certificate_name_help = gengetopt_args_info_full_help[54] ;
  args_info->max_reconnect_help = gengetopt_args_info_full_help[55] ;
  args_info->http_version_help = gengetopt_args_info_full_help[56] ;
  args_info->request_method_help = gengetopt_args_info_full_help[57] ;
  args_info->header_help = gengetopt_args_info_full_help[58] ;
  args_info->header_min = 0;
  args_info->header_max = 0;
  args_info->winsock_major_help = gengetopt_args_info_full_help[59] ;
  args_info->winsock_minor_help = gengetopt_args_info_full_help[60] ;
  
}

void
cmdline_parser_print_version (void)
{
  printf ("%s %s\n",
     (strlen(CMDLINE_PARSER_PACKAGE_NAME) ? CMDLINE_PARSER_PACKAGE_NAME : CMDLINE_PARSER_PACKAGE),
     CMDLINE_PARSER_VERSION);
}

static void print_help_common(void) {
  cmdline_parser_print_version ();

  if (strlen(gengetopt_args_info_purpose) > 0)
    printf("\n%s\n", gengetopt_args_info_purpose);

  if (strlen(gengetopt_args_info_usage) > 0)
    printf("\n%s\n", gengetopt_args_info_usage);

  printf("\n");

  if (strlen(gengetopt_args_info_description) > 0)
    printf("%s\n\n", gengetopt_args_info_description);
}

void
cmdline_parser_print_help (void)
{
  int i = 0;
  print_help_common();
  while (gengetopt_args_info_help[i])
    printf("%s\n", gengetopt_args_info_help[i++]);
}

void
cmdline_parser_print_full_help (void)
{
  int i = 0;
  print_help_common();
  while (gengetopt_args_info_full_help[i])
    printf("%s\n", gengetopt_args_info_full_help[i++]);
}

void
cmdline_parser_init (struct gengetopt_args_info *args_info)
{
  clear_given (args_info);
  clear_args (args_info);
  init_args_info (args_info);

  args_info->inputs = 0;
  args_info->inputs_num = 0;
}

void
cmdline_parser_params_init(struct cmdline_parser_params *params)
{
  if (params)
    { 
      params->override = 0;
      params->initialize = 1;
      params->check_required = 1;
      params->check_ambiguity = 0;
      params->print_errors = 1;
    }
}

struct cmdline_parser_params *
cmdline_parser_params_create(void)
{
  struct cmdline_parser_params *params = 
    (struct cmdline_parser_params *)malloc(sizeof(struct cmdline_parser_params));
  cmdline_parser_params_init(params);  
  return params;
}

static void
free_string_field (char **s)
{
  if (*s)
    {
      free (*s);
      *s = 0;
    }
}

/** @brief generic value variable */
union generic_value {
    int int_arg;
    char *string_arg;
    const char *default_string_arg;
};

/** @brief holds temporary values for multiple options */
struct generic_list
{
  union generic_value arg;
  char *orig;
  struct generic_list *next;
};

/**
 * @brief add a node at the head of the list 
 */
static void add_node(struct generic_list **list) {
  struct generic_list *new_node = (struct generic_list *) malloc (sizeof (struct generic_list));
  new_node->next = *list;
  *list = new_node;
  new_node->arg.string_arg = 0;
  new_node->orig = 0;
}

/**
 * The passed arg parameter is NOT set to 0 from this function
 */
static void
free_multiple_field(unsigned int len, void *arg, char ***orig)
{
  unsigned int i;
  if (arg) {
    for (i = 0; i < len; ++i)
      {
        free_string_field(&((*orig)[i]));
      }

    free (arg);
    free (*orig);
    *orig = 0;
  }
}

static void
free_multiple_string_field(unsigned int len, char ***arg, char ***orig)
{
  unsigned int i;
  if (*arg) {
    for (i = 0; i < len; ++i)
      {
        free_string_field(&((*arg)[i]));
        free_string_field(&((*orig)[i]));
      }
    free_string_field(&((*arg)[0])); /* free default string */

    free (*arg);
    *arg = 0;
    free (*orig);
    *orig = 0;
  }
}

static void
cmdline_parser_release (struct gengetopt_args_info *args_info)
{
  unsigned int i;
  free_multiple_field (args_info->verbose_given, (void *)(args_info->verbose_arg), &(args_info->verbose_orig));
  args_info->verbose_arg = 0;
  free_string_field (&(args_info->user_dir_arg));
  free_string_field (&(args_info->user_dir_orig));
  free_string_field (&(args_info->tool_chain_arg));
  free_string_field (&(args_info->tool_chain_orig));
  free_string_field (&(args_info->output_arg));
  free_string_field (&(args_info->output_orig));
  free_multiple_field (args_info->interactive_given, (void *)(args_info->interactive_arg), &(args_info->interactive_orig));
  args_info->interactive_arg = 0;
  free_multiple_string_field (args_info->output_dir_given, &(args_info->output_dir_arg), &(args_info->output_dir_orig));
  free_multiple_string_field (args_info->include_dir_given, &(args_info->include_dir_arg), &(args_info->include_dir_orig));
  free_string_field (&(args_info->encoding_arg));
  free_string_field (&(args_info->encoding_orig));
  free_string_field (&(args_info->dependency_list_arg));
  free_string_field (&(args_info->dependency_list_orig));
  free_string_field (&(args_info->independent_arg));
  free_string_field (&(args_info->independent_orig));
  free_string_field (&(args_info->dependent_arg));
  free_string_field (&(args_info->dependent_orig));
  free_multiple_string_field (args_info->transformation_param_given, &(args_info->transformation_param_arg), &(args_info->transformation_param_orig));
  free_string_field (&(args_info->xslt_processor_arg));
  free_string_field (&(args_info->xslt_processor_orig));
  free_multiple_field (args_info->comments_given, (void *)(args_info->comments_arg), &(args_info->comments_orig));
  args_info->comments_arg = 0;
  free_string_field (&(args_info->server_arg));
  free_string_field (&(args_info->server_orig));
  free_string_field (&(args_info->hostname_arg));
  free_string_field (&(args_info->hostname_orig));
  free_string_field (&(args_info->cgi_path_arg));
  free_string_field (&(args_info->cgi_path_orig));
  free_string_field (&(args_info->request_path_arg));
  free_string_field (&(args_info->request_path_orig));
  free_string_field (&(args_info->port_arg));
  free_string_field (&(args_info->port_orig));
  free_multiple_string_field (args_info->cgi_param_given, &(args_info->cgi_param_arg), &(args_info->cgi_param_orig));
  free_string_field (&(args_info->seed_file_arg));
  free_string_field (&(args_info->seed_file_orig));
  free_string_field (&(args_info->trust_store_arg));
  free_string_field (&(args_info->trust_store_orig));
  free_string_field (&(args_info->ciphers_arg));
  free_string_field (&(args_info->ciphers_orig));
  free_string_field (&(args_info->max_reconnect_orig));
  free_string_field (&(args_info->http_version_arg));
  free_string_field (&(args_info->http_version_orig));
  free_string_field (&(args_info->request_method_arg));
  free_string_field (&(args_info->request_method_orig));
  free_multiple_string_field (args_info->header_given, &(args_info->header_arg), &(args_info->header_orig));
  free_string_field (&(args_info->winsock_major_orig));
  free_string_field (&(args_info->winsock_minor_orig));
  
  
  for (i = 0; i < args_info->inputs_num; ++i)
    free (args_info->inputs [i]);

  if (args_info->inputs_num)
    free (args_info->inputs);

  clear_given (args_info);
}


static void
write_into_file(FILE *outfile, const char *opt, const char *arg, const char *values[])
{
  FIX_UNUSED (values);
  if (arg) {
    fprintf(outfile, "%s=\"%s\"\n", opt, arg);
  } else {
    fprintf(outfile, "%s\n", opt);
  }
}

static void
write_multiple_into_file(FILE *outfile, int len, const char *opt, char **arg, const char *values[])
{
  int i;
  
  for (i = 0; i < len; ++i)
    write_into_file(outfile, opt, (arg ? arg[i] : 0), values);
}

int
cmdline_parser_dump(FILE *outfile, struct gengetopt_args_info *args_info)
{
  int i = 0;

  if (!outfile)
    {
      fprintf (stderr, "%s: cannot dump options to stream\n", CMDLINE_PARSER_PACKAGE);
      return EXIT_FAILURE;
    }

  if (args_info->help_given)
    write_into_file(outfile, "help", 0, 0 );
  if (args_info->full_help_given)
    write_into_file(outfile, "full-help", 0, 0 );
  if (args_info->version_given)
    write_into_file(outfile, "version", 0, 0 );
  if (args_info->long_version_given)
    write_into_file(outfile, "long-version", 0, 0 );
  write_multiple_into_file(outfile, args_info->verbose_given, "verbose", args_info->verbose_orig, 0);
  if (args_info->debug_given)
    write_into_file(outfile, "debug", 0, 0 );
  if (args_info->user_dir_given)
    write_into_file(outfile, "user-dir", args_info->user_dir_orig, 0);
  if (args_info->classic_forward_given)
    write_into_file(outfile, "classic-forward", 0, 0 );
  if (args_info->forward_given)
    write_into_file(outfile, "forward", 0, 0 );
  if (args_info->taylor_given)
    write_into_file(outfile, "taylor", 0, 0 );
  if (args_info->reverse_given)
    write_into_file(outfile, "reverse", 0, 0 );
  if (args_info->tool_chain_given)
    write_into_file(outfile, "tool-chain", args_info->tool_chain_orig, 0);
  if (args_info->list_tool_chains_given)
    write_into_file(outfile, "list-tool-chains", 0, 0 );
  if (args_info->server_version_given)
    write_into_file(outfile, "server-version", 0, 0 );
  if (args_info->stdout_given)
    write_into_file(outfile, "stdout", 0, 0 );
  if (args_info->output_given)
    write_into_file(outfile, "output", args_info->output_orig, 0);
  write_multiple_into_file(outfile, args_info->interactive_given, "interactive", args_info->interactive_orig, 0);
  write_multiple_into_file(outfile, args_info->output_dir_given, "output-dir", args_info->output_dir_orig, 0);
  write_multiple_into_file(outfile, args_info->include_dir_given, "include-dir", args_info->include_dir_orig, 0);
  if (args_info->encoding_given)
    write_into_file(outfile, "encoding", args_info->encoding_orig, 0);
  if (args_info->dependency_list_given)
    write_into_file(outfile, "dependency-list", args_info->dependency_list_orig, 0);
  if (args_info->unbound_given)
    write_into_file(outfile, "unbound", 0, 0 );
  if (args_info->independent_given)
    write_into_file(outfile, "independent", args_info->independent_orig, 0);
  if (args_info->dependent_given)
    write_into_file(outfile, "dependent", args_info->dependent_orig, 0);
  write_multiple_into_file(outfile, args_info->transformation_param_given, "transformation-param", args_info->transformation_param_orig, 0);
  if (args_info->all_active_given)
    write_into_file(outfile, "all-active", 0, 0 );
  if (args_info->xslt_processor_given)
    write_into_file(outfile, "xslt-processor", args_info->xslt_processor_orig, 0);
  if (args_info->vector_given)
    write_into_file(outfile, "vector", 0, 0 );
  write_multiple_into_file(outfile, args_info->comments_given, "comments", args_info->comments_orig, 0);
  if (args_info->server_given)
    write_into_file(outfile, "server", args_info->server_orig, 0);
  if (args_info->hostname_given)
    write_into_file(outfile, "hostname", args_info->hostname_orig, 0);
  if (args_info->cgi_path_given)
    write_into_file(outfile, "cgi-path", args_info->cgi_path_orig, 0);
  if (args_info->request_path_given)
    write_into_file(outfile, "request-path", args_info->request_path_orig, 0);
  if (args_info->port_given)
    write_into_file(outfile, "port", args_info->port_orig, 0);
  if (args_info->numeric_host_given)
    write_into_file(outfile, "numeric-host", 0, 0 );
  if (args_info->numeric_port_given)
    write_into_file(outfile, "numeric-port", 0, 0 );
  if (args_info->no_canonical_host_name_given)
    write_into_file(outfile, "no-canonical-host-name", 0, 0 );
  if (args_info->ipv4_given)
    write_into_file(outfile, "ipv4", 0, 0 );
  if (args_info->ipv6_given)
    write_into_file(outfile, "ipv6", 0, 0 );
  write_multiple_into_file(outfile, args_info->cgi_param_given, "cgi-param", args_info->cgi_param_orig, 0);
  if (args_info->no_ssl_given)
    write_into_file(outfile, "no-ssl", 0, 0 );
  if (args_info->seed_file_given)
    write_into_file(outfile, "seed-file", args_info->seed_file_orig, 0);
  if (args_info->trust_store_given)
    write_into_file(outfile, "trust-store", args_info->trust_store_orig, 0);
  if (args_info->ciphers_given)
    write_into_file(outfile, "ciphers", args_info->ciphers_orig, 0);
  if (args_info->check_certificate_given)
    write_into_file(outfile, "check-certificate", 0, 0 );
  if (args_info->check_certificate_name_given)
    write_into_file(outfile, "check-certificate-name", 0, 0 );
  if (args_info->max_reconnect_given)
    write_into_file(outfile, "max-reconnect", args_info->max_reconnect_orig, 0);
  if (args_info->http_version_given)
    write_into_file(outfile, "http-version", args_info->http_version_orig, 0);
  if (args_info->request_method_given)
    write_into_file(outfile, "request-method", args_info->request_method_orig, 0);
  write_multiple_into_file(outfile, args_info->header_given, "header", args_info->header_orig, 0);
  if (args_info->winsock_major_given)
    write_into_file(outfile, "winsock-major", args_info->winsock_major_orig, 0);
  if (args_info->winsock_minor_given)
    write_into_file(outfile, "winsock-minor", args_info->winsock_minor_orig, 0);
  

  i = EXIT_SUCCESS;
  return i;
}

int
cmdline_parser_file_save(const char *filename, struct gengetopt_args_info *args_info)
{
  FILE *outfile;
  int i = 0;

  outfile = fopen(filename, "w");

  if (!outfile)
    {
      fprintf (stderr, "%s: cannot open file for writing: %s\n", CMDLINE_PARSER_PACKAGE, filename);
      return EXIT_FAILURE;
    }

  i = cmdline_parser_dump(outfile, args_info);
  fclose (outfile);

  return i;
}

void
cmdline_parser_free (struct gengetopt_args_info *args_info)
{
  cmdline_parser_release (args_info);
}

/** @brief replacement of strdup, which is not standard */
char *
gengetopt_strdup (const char *s)
{
  char *result = 0;
  if (!s)
    return result;

  result = (char*)malloc(strlen(s) + 1);
  if (result == (char*)0)
    return (char*)0;
  strcpy(result, s);
  return result;
}

static char *
get_multiple_arg_token(const char *arg)
{
  const char *tok;
  char *ret;
  size_t len, num_of_escape, i, j;

  if (!arg)
    return 0;

  tok = strchr (arg, ',');
  num_of_escape = 0;

  /* make sure it is not escaped */
  while (tok)
    {
      if (*(tok-1) == '\\')
        {
          /* find the next one */
          tok = strchr (tok+1, ',');
          ++num_of_escape;
        }
      else
        break;
    }

  if (tok)
    len = (size_t)(tok - arg + 1);
  else
    len = strlen (arg) + 1;

  len -= num_of_escape;

  ret = (char *) malloc (len);

  i = 0;
  j = 0;
  while (arg[i] && (j < len-1))
    {
      if (arg[i] == '\\' && 
	  arg[ i + 1 ] && 
	  arg[ i + 1 ] == ',')
        ++i;

      ret[j++] = arg[i++];
    }

  ret[len-1] = '\0';

  return ret;
}

static const char *
get_multiple_arg_token_next(const char *arg)
{
  const char *tok;

  if (!arg)
    return 0;

  tok = strchr (arg, ',');

  /* make sure it is not escaped */
  while (tok)
    {
      if (*(tok-1) == '\\')
        {
          /* find the next one */
          tok = strchr (tok+1, ',');
        }
      else
        break;
    }

  if (! tok || strlen(tok) == 1)
    return 0;

  return tok+1;
}

static int
check_multiple_option_occurrences(const char *prog_name, unsigned int option_given, unsigned int min, unsigned int max, const char *option_desc);

int
check_multiple_option_occurrences(const char *prog_name, unsigned int option_given, unsigned int min, unsigned int max, const char *option_desc)
{
  int error = 0;

  if (option_given && (min > 0 || max > 0))
    {
      if (min > 0 && max > 0)
        {
          if (min == max)
            {
              /* specific occurrences */
              if (option_given != (unsigned int) min)
                {
                  fprintf (stderr, "%s: %s option occurrences must be %d\n",
                    prog_name, option_desc, min);
                  error = 1;
                }
            }
          else if (option_given < (unsigned int) min
                || option_given > (unsigned int) max)
            {
              /* range occurrences */
              fprintf (stderr, "%s: %s option occurrences must be between %d and %d\n",
                prog_name, option_desc, min, max);
              error = 1;
            }
        }
      else if (min > 0)
        {
          /* at least check */
          if (option_given < min)
            {
              fprintf (stderr, "%s: %s option occurrences must be at least %d\n",
                prog_name, option_desc, min);
              error = 1;
            }
        }
      else if (max > 0)
        {
          /* at most check */
          if (option_given > max)
            {
              fprintf (stderr, "%s: %s option occurrences must be at most %d\n",
                prog_name, option_desc, max);
              error = 1;
            }
        }
    }
    
  return error;
}
int
cmdline_parser (int argc, char **argv, struct gengetopt_args_info *args_info)
{
  return cmdline_parser2 (argc, argv, args_info, 0, 1, 1);
}

int
cmdline_parser_ext (int argc, char **argv, struct gengetopt_args_info *args_info,
                   struct cmdline_parser_params *params)
{
  int result;
  result = cmdline_parser_internal (argc, argv, args_info, params, 0);

  return result;
}

int
cmdline_parser2 (int argc, char **argv, struct gengetopt_args_info *args_info, int override, int initialize, int check_required)
{
  int result;
  struct cmdline_parser_params params;
  
  params.override = override;
  params.initialize = initialize;
  params.check_required = check_required;
  params.check_ambiguity = 0;
  params.print_errors = 1;

  result = cmdline_parser_internal (argc, argv, args_info, &params, 0);

  return result;
}

int
cmdline_parser_required (struct gengetopt_args_info *args_info, const char *prog_name)
{
  int result = EXIT_SUCCESS;

  if (cmdline_parser_required2(args_info, prog_name, 0) > 0)
    result = EXIT_FAILURE;

  return result;
}

int
cmdline_parser_required2 (struct gengetopt_args_info *args_info, const char *prog_name, const char *additional_error)
{
  int error = 0;
  FIX_UNUSED (additional_error);

  /* checks for required options */
  if (check_multiple_option_occurrences(prog_name, args_info->verbose_given, args_info->verbose_min, args_info->verbose_max, "'--verbose' ('-V')"))
     error = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->interactive_given, args_info->interactive_min, args_info->interactive_max, "'--interactive'"))
     error = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->output_dir_given, args_info->output_dir_min, args_info->output_dir_max, "'--output-dir' ('-p')"))
     error = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->include_dir_given, args_info->include_dir_min, args_info->include_dir_max, "'--include-dir' ('-I')"))
     error = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->transformation_param_given, args_info->transformation_param_min, args_info->transformation_param_max, "'--transformation-param' ('-s')"))
     error = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->comments_given, args_info->comments_min, args_info->comments_max, "'--comments' ('-c')"))
     error = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->cgi_param_given, args_info->cgi_param_min, args_info->cgi_param_max, "'--cgi-param'"))
     error = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->header_given, args_info->header_min, args_info->header_max, "'--header'"))
     error = 1;
  
  
  /* checks for dependences among options */

  return error;
}


static char *package_name = 0;

/**
 * @brief updates an option
 * @param field the generic pointer to the field to update
 * @param orig_field the pointer to the orig field
 * @param field_given the pointer to the number of occurrence of this option
 * @param prev_given the pointer to the number of occurrence already seen
 * @param value the argument for this option (if null no arg was specified)
 * @param possible_values the possible values for this option (if specified)
 * @param default_value the default value (in case the option only accepts fixed values)
 * @param arg_type the type of this option
 * @param check_ambiguity @see cmdline_parser_params.check_ambiguity
 * @param override @see cmdline_parser_params.override
 * @param no_free whether to free a possible previous value
 * @param multiple_option whether this is a multiple option
 * @param long_opt the corresponding long option
 * @param short_opt the corresponding short option (or '-' if none)
 * @param additional_error possible further error specification
 */
static
int update_arg(void *field, char **orig_field,
               unsigned int *field_given, unsigned int *prev_given, 
               char *value, const char *possible_values[],
               const char *default_value,
               cmdline_parser_arg_type arg_type,
               int check_ambiguity, int override,
               int no_free, int multiple_option,
               const char *long_opt, char short_opt,
               const char *additional_error)
{
  char *stop_char = 0;
  const char *val = value;
  int found;
  char **string_field;
  FIX_UNUSED (field);

  stop_char = 0;
  found = 0;

  if (!multiple_option && prev_given && (*prev_given || (check_ambiguity && *field_given)))
    {
      if (short_opt != '-')
        fprintf (stderr, "%s: `--%s' (`-%c') option given more than once%s\n", 
               package_name, long_opt, short_opt,
               (additional_error ? additional_error : ""));
      else
        fprintf (stderr, "%s: `--%s' option given more than once%s\n", 
               package_name, long_opt,
               (additional_error ? additional_error : ""));
      return 1; /* failure */
    }

  FIX_UNUSED (default_value);
    
  if (field_given && *field_given && ! override)
    return 0;
  if (prev_given)
    (*prev_given)++;
  if (field_given)
    (*field_given)++;
  if (possible_values)
    val = possible_values[found];

  switch(arg_type) {
  case ARG_FLAG:
    *((int *)field) = !*((int *)field);
    break;
  case ARG_INT:
    if (val) *((int *)field) = strtol (val, &stop_char, 0);
    break;
  case ARG_STRING:
    if (val) {
      string_field = (char **)field;
      if (!no_free && *string_field)
        free (*string_field); /* free previous string */
      *string_field = gengetopt_strdup (val);
    }
    break;
  default:
    break;
  };

  /* check numeric conversion */
  switch(arg_type) {
  case ARG_INT:
    if (val && !(stop_char && *stop_char == '\0')) {
      fprintf(stderr, "%s: invalid numeric value: %s\n", package_name, val);
      return 1; /* failure */
    }
    break;
  default:
    ;
  };

  /* store the original value */
  switch(arg_type) {
  case ARG_NO:
  case ARG_FLAG:
    break;
  default:
    if (value && orig_field) {
      if (no_free) {
        *orig_field = value;
      } else {
        if (*orig_field)
          free (*orig_field); /* free previous string */
        *orig_field = gengetopt_strdup (value);
      }
    }
  };

  return 0; /* OK */
}

/**
 * @brief store information about a multiple option in a temporary list
 * @param list where to (temporarily) store multiple options
 */
static
int update_multiple_arg_temp(struct generic_list **list,
               unsigned int *prev_given, const char *val,
               const char *possible_values[], const char *default_value,
               cmdline_parser_arg_type arg_type,
               const char *long_opt, char short_opt,
               const char *additional_error)
{
  /* store single arguments */
  char *multi_token;
  const char *multi_next;

  if (arg_type == ARG_NO) {
    (*prev_given)++;
    return 0; /* OK */
  }

  multi_token = get_multiple_arg_token(val);
  multi_next = get_multiple_arg_token_next (val);

  while (1)
    {
      add_node (list);
      if (update_arg((void *)&((*list)->arg), &((*list)->orig), 0,
          prev_given, multi_token, possible_values, default_value, 
          arg_type, 0, 1, 1, 1, long_opt, short_opt, additional_error)) {
        if (multi_token) free(multi_token);
        return 1; /* failure */
      }

      if (multi_next)
        {
          multi_token = get_multiple_arg_token(multi_next);
          multi_next = get_multiple_arg_token_next (multi_next);
        }
      else
        break;
    }

  return 0; /* OK */
}

/**
 * @brief free the passed list (including possible string argument)
 */
static
void free_list(struct generic_list *list, short string_arg)
{
  if (list) {
    struct generic_list *tmp;
    while (list)
      {
        tmp = list;
        if (string_arg && list->arg.string_arg)
          free (list->arg.string_arg);
        if (list->orig)
          free (list->orig);
        list = list->next;
        free (tmp);
      }
  }
}

/**
 * @brief updates a multiple option starting from the passed list
 */
static
void update_multiple_arg(void *field, char ***orig_field,
               unsigned int field_given, unsigned int prev_given, union generic_value *default_value,
               cmdline_parser_arg_type arg_type,
               struct generic_list *list)
{
  int i;
  struct generic_list *tmp;

  if (prev_given && list) {
    *orig_field = (char **) realloc (*orig_field, (field_given + prev_given) * sizeof (char *));

    switch(arg_type) {
    case ARG_INT:
      *((int **)field) = (int *)realloc (*((int **)field), (field_given + prev_given) * sizeof (int)); break;
    case ARG_STRING:
      *((char ***)field) = (char **)realloc (*((char ***)field), (field_given + prev_given) * sizeof (char *)); break;
    default:
      break;
    };
    
    for (i = (prev_given - 1); i >= 0; --i)
      {
        tmp = list;
        
        switch(arg_type) {
        case ARG_INT:
          (*((int **)field))[i + field_given] = tmp->arg.int_arg; break;
        case ARG_STRING:
          (*((char ***)field))[i + field_given] = tmp->arg.string_arg; break;
        default:
          break;
        }        
        (*orig_field) [i + field_given] = list->orig;
        list = list->next;
        free (tmp);
      }
  } else { /* set the default value */
    if (default_value && ! field_given) {
      switch(arg_type) {
      case ARG_INT:
        if (! *((int **)field)) {
          *((int **)field) = (int *)malloc (sizeof (int));
          (*((int **)field))[0] = default_value->int_arg; 
        }
        break;
      case ARG_STRING:
        if (! *((char ***)field)) {
          *((char ***)field) = (char **)malloc (sizeof (char *));
          (*((char ***)field))[0] = gengetopt_strdup(default_value->string_arg);
        }
        break;
      default: break;
      }
      if (!(*orig_field)) {
        *orig_field = (char **) malloc (sizeof (char *));
        (*orig_field)[0] = 0;
      }
    }
  }
}

static int check_modes(
  int given1[], const char *options1[],
                       int given2[], const char *options2[])
{
  int i = 0, j = 0, errors = 0;
  
  while (given1[i] >= 0) {
    if (given1[i]) {
      while (given2[j] >= 0) {
        if (given2[j]) {
          ++errors;
          fprintf(stderr, "%s: option %s conflicts with option %s\n",
                  package_name, options1[i], options2[j]);
        }
        ++j;
      }
    }
    ++i;
  }
  
  return errors;
}

int
cmdline_parser_internal (
  int argc, char **argv, struct gengetopt_args_info *args_info,
                        struct cmdline_parser_params *params, const char *additional_error)
{
  int c;	/* Character of the parsed option.  */
  union generic_value multiple_default_value;

  struct generic_list * verbose_list = NULL;
  struct generic_list * interactive_list = NULL;
  struct generic_list * output_dir_list = NULL;
  struct generic_list * include_dir_list = NULL;
  struct generic_list * transformation_param_list = NULL;
  struct generic_list * comments_list = NULL;
  struct generic_list * cgi_param_list = NULL;
  struct generic_list * header_list = NULL;
  int error = 0;
  struct gengetopt_args_info local_args_info;
  
  int override;
  int initialize;
  int check_required;
  int check_ambiguity;
  
  package_name = argv[0];
  
  override = params->override;
  initialize = params->initialize;
  check_required = params->check_required;
  check_ambiguity = params->check_ambiguity;

  if (initialize)
    cmdline_parser_init (args_info);

  cmdline_parser_init (&local_args_info);

  optarg = 0;
  optind = 0;
  opterr = params->print_errors;
  optopt = '?';

  while (1)
    {
      int option_index = 0;

      static struct option long_options[] = {
        { "help",	0, NULL, 'h' },
        { "full-help",	0, NULL, 0 },
        { "version",	0, NULL, 0 },
        { "long-version",	0, NULL, 0 },
        { "verbose",	2, NULL, 'V' },
        { "debug",	0, NULL, 0 },
        { "user-dir",	1, NULL, 0 },
        { "classic-forward",	0, NULL, 'F' },
        { "forward",	0, NULL, 'f' },
        { "taylor",	0, NULL, 't' },
        { "reverse",	0, NULL, 'r' },
        { "tool-chain",	1, NULL, 'T' },
        { "list-tool-chains",	0, NULL, 0 },
        { "server-version",	0, NULL, 0 },
        { "stdout",	0, NULL, 0 },
        { "output",	1, NULL, 'o' },
        { "interactive",	1, NULL, 0 },
        { "output-dir",	1, NULL, 'p' },
        { "include-dir",	1, NULL, 'I' },
        { "encoding",	1, NULL, 'e' },
        { "dependency-list",	1, NULL, 'M' },
        { "unbound",	0, NULL, 'b' },
        { "independent",	1, NULL, 'i' },
        { "dependent",	1, NULL, 'd' },
        { "transformation-param",	1, NULL, 's' },
        { "all-active",	0, NULL, 'A' },
        { "xslt-processor",	1, NULL, 'x' },
        { "vector",	0, NULL, 'v' },
        { "comments",	2, NULL, 'c' },
        { "server",	1, NULL, 0 },
        { "hostname",	1, NULL, 0 },
        { "cgi-path",	1, NULL, 0 },
        { "request-path",	1, NULL, 0 },
        { "port",	1, NULL, 'P' },
        { "numeric-host",	0, NULL, 0 },
        { "numeric-port",	0, NULL, 0 },
        { "no-canonical-host-name",	0, NULL, 0 },
        { "ipv4",	0, NULL, 0 },
        { "ipv6",	0, NULL, 0 },
        { "cgi-param",	1, NULL, 0 },
        { "no-ssl",	0, NULL, 0 },
        { "seed-file",	1, NULL, 0 },
        { "trust-store",	1, NULL, 0 },
        { "ciphers",	1, NULL, 0 },
        { "check-certificate",	0, NULL, 0 },
        { "check-certificate-name",	0, NULL, 0 },
        { "max-reconnect",	1, NULL, 0 },
        { "http-version",	1, NULL, 0 },
        { "request-method",	1, NULL, 0 },
        { "header",	1, NULL, 0 },
        { "winsock-major",	1, NULL, 0 },
        { "winsock-minor",	1, NULL, 0 },
        { 0,  0, 0, 0 }
      };

      c = getopt_long (argc, argv, "hV::FftrT:o:p:I:e:M:bi:d:s:Ax:vc::P:", long_options, &option_index);

      if (c == -1) break;	/* Exit from `while (1)' loop.  */

      switch (c)
        {
        case 'h':	/* Print help and exit.  */
        
        
          if (update_arg( 0 , 
               0 , &(args_info->help_given),
              &(local_args_info.help_given), optarg, 0, 0, ARG_NO,
              check_ambiguity, override, 0, 0,
              "help", 'h',
              additional_error))
            goto failure;
          cmdline_parser_free (&local_args_info);
          return 0;
        
          break;
        case 'V':	/* Set the level of status messages. 0 (no output at all) upto 20 (most chatty).  */
        
          if (update_multiple_arg_temp(&verbose_list, 
              &(local_args_info.verbose_given), optarg, 0, "5", ARG_INT,
              "verbose", 'V',
              additional_error))
            goto failure;
        
          break;
        case 'F':	/* Differentiate in Forward Mode.  */
          args_info->classic_fm_mode_counter += 1;
        
        
          if (update_arg((void *)&(args_info->classic_forward_flag), 0, &(args_info->classic_forward_given),
              &(local_args_info.classic_forward_given), optarg, 0, 0, ARG_FLAG,
              check_ambiguity, override, 1, 0, "classic-forward", 'F',
              additional_error))
            goto failure;
        
          break;
        case 'f':	/* Differentiate in Forward Mode.  */
          args_info->fm_mode_counter += 1;
        
        
          if (update_arg((void *)&(args_info->forward_flag), 0, &(args_info->forward_given),
              &(local_args_info.forward_given), optarg, 0, 0, ARG_FLAG,
              check_ambiguity, override, 1, 0, "forward", 'f',
              additional_error))
            goto failure;
        
          break;
        case 't':	/* Differentiate in Taylor Forward Mode.  */
          args_info->taylor_mode_counter += 1;
        
        
          if (update_arg((void *)&(args_info->taylor_flag), 0, &(args_info->taylor_given),
              &(local_args_info.taylor_given), optarg, 0, 0, ARG_FLAG,
              check_ambiguity, override, 1, 0, "taylor", 't',
              additional_error))
            goto failure;
        
          break;
        case 'r':	/* Differentiate in Reverse Mode.  */
          args_info->rm_mode_counter += 1;
        
        
          if (update_arg((void *)&(args_info->reverse_flag), 0, &(args_info->reverse_given),
              &(local_args_info.reverse_given), optarg, 0, 0, ARG_FLAG,
              check_ambiguity, override, 1, 0, "reverse", 'r',
              additional_error))
            goto failure;
        
          break;
        case 'T':	/* Run named toolchain.  */
          args_info->Toolchain_mode_counter += 1;
        
        
          if (update_arg( (void *)&(args_info->tool_chain_arg), 
               &(args_info->tool_chain_orig), &(args_info->tool_chain_given),
              &(local_args_info.tool_chain_given), optarg, 0, 0, ARG_STRING,
              check_ambiguity, override, 0, 0,
              "tool-chain", 'T',
              additional_error))
            goto failure;
        
          break;
        case 'o':	/* Output received files to file.  */
        
        
          if (update_arg( (void *)&(args_info->output_arg), 
               &(args_info->output_orig), &(args_info->output_given),
              &(local_args_info.output_given), optarg, 0, 0, ARG_STRING,
              check_ambiguity, override, 0, 0,
              "output", 'o',
              additional_error))
            goto failure;
        
          break;
        case 'p':	/* Write received files to directory.  */
        
          if (update_multiple_arg_temp(&output_dir_list, 
              &(local_args_info.output_dir_given), optarg, 0, ".", ARG_STRING,
              "output-dir", 'p',
              additional_error))
            goto failure;
        
          break;
        case 'I':	/* Add directory to search path.  */
        
          if (update_multiple_arg_temp(&include_dir_list, 
              &(local_args_info.include_dir_given), optarg, 0, 0, ARG_STRING,
              "include-dir", 'I',
              additional_error))
            goto failure;
        
          break;
        case 'e':	/* Specify encoding of input files.  */
        
        
          if (update_arg( (void *)&(args_info->encoding_arg), 
               &(args_info->encoding_orig), &(args_info->encoding_given),
              &(local_args_info.encoding_given), optarg, 0, "utf-8", ARG_STRING,
              check_ambiguity, override, 0, 0,
              "encoding", 'e',
              additional_error))
            goto failure;
        
          break;
        case 'M':	/* Write list of dependencies to file.  */
        
        
          if (update_arg( (void *)&(args_info->dependency_list_arg), 
               &(args_info->dependency_list_orig), &(args_info->dependency_list_given),
              &(local_args_info.dependency_list_given), optarg, 0, 0, ARG_STRING,
              check_ambiguity, override, 0, 0,
              "dependency-list", 'M',
              additional_error))
            goto failure;
        
          break;
        case 'b':	/* Don't ask for more files if unbound identifieres.  */
        
        
          if (update_arg((void *)&(args_info->unbound_flag), 0, &(args_info->unbound_given),
              &(local_args_info.unbound_given), optarg, 0, 0, ARG_FLAG,
              check_ambiguity, override, 1, 0, "unbound", 'b',
              additional_error))
            goto failure;
        
          break;
        case 'i':	/* Set independent variables.  */
        
        
          if (update_arg( (void *)&(args_info->independent_arg), 
               &(args_info->independent_orig), &(args_info->independent_given),
              &(local_args_info.independent_given), optarg, 0, 0, ARG_STRING,
              check_ambiguity, override, 0, 0,
              "independent", 'i',
              additional_error))
            goto failure;
        
          break;
        case 'd':	/* Set independent variables.  */
        
        
          if (update_arg( (void *)&(args_info->dependent_arg), 
               &(args_info->dependent_orig), &(args_info->dependent_given),
              &(local_args_info.dependent_given), optarg, 0, 0, ARG_STRING,
              check_ambiguity, override, 0, 0,
              "dependent", 'd',
              additional_error))
            goto failure;
        
          break;
        case 's':	/* Set a transformation parameter.  */
        
          if (update_multiple_arg_temp(&transformation_param_list, 
              &(local_args_info.transformation_param_given), optarg, 0, 0, ARG_STRING,
              "transformation-param", 's',
              additional_error))
            goto failure;
        
          break;
        case 'A':	/* Ignore activity analysis and consider all variables active (rm/fm only).  */
        
        
          if (update_arg((void *)&(args_info->all_active_flag), 0, &(args_info->all_active_given),
              &(local_args_info.all_active_given), optarg, 0, 0, ARG_FLAG,
              check_ambiguity, override, 1, 0, "all-active", 'A',
              additional_error))
            goto failure;
        
          break;
        case 'x':	/* Set XSLT processor (xsltproc or saxon-xslt).  */
        
        
          if (update_arg( (void *)&(args_info->xslt_processor_arg), 
               &(args_info->xslt_processor_orig), &(args_info->xslt_processor_given),
              &(local_args_info.xslt_processor_given), optarg, 0, 0, ARG_STRING,
              check_ambiguity, override, 0, 0,
              "xslt-processor", 'x',
              additional_error))
            goto failure;
        
          break;
        case 'v':	/* Create code for classless vector mode.  */
        
        
          if (update_arg((void *)&(args_info->vector_flag), 0, &(args_info->vector_given),
              &(local_args_info.vector_given), optarg, 0, 0, ARG_FLAG,
              check_ambiguity, override, 1, 0, "vector", 'v',
              additional_error))
            goto failure;
        
          break;
        case 'c':	/* Add comments inserted into the code. Repeat for more comments.  */
        
          if (update_multiple_arg_temp(&comments_list, 
              &(local_args_info.comments_given), optarg, 0, "0", ARG_INT,
              "comments", 'c',
              additional_error))
            goto failure;
        
          break;
        case 'P':	/* Port to connect to.  */
        
        
          if (update_arg( (void *)&(args_info->port_arg), 
               &(args_info->port_orig), &(args_info->port_given),
              &(local_args_info.port_given), optarg, 0, "443", ARG_STRING,
              check_ambiguity, override, 0, 0,
              "port", 'P',
              additional_error))
            goto failure;
        
          break;

        case 0:	/* Long option with no short option */
          /* Print help, including hidden options, and exit.  */
          if (strcmp (long_options[option_index].name, "full-help") == 0)
          {
          
          
            if (update_arg( 0 , 
                 0 , &(args_info->full_help_given),
                &(local_args_info.full_help_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "full-help", '-',
                additional_error))
              goto failure;
            cmdline_parser_free (&local_args_info);
            return 0;
          
          }
          /* Print version and exit.  */
          else if (strcmp (long_options[option_index].name, "version") == 0)
          {
          
          
            if (update_arg( 0 , 
                 0 , &(args_info->version_given),
                &(local_args_info.version_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "version", 'V',
                additional_error))
              goto failure;
            cmdline_parser_free (&local_args_info);
            return 0;
          
          }
          /* Print long version.  */
          else if (strcmp (long_options[option_index].name, "long-version") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->long_version_flag), 0, &(args_info->long_version_given),
                &(local_args_info.long_version_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "long-version", '-',
                additional_error))
              goto failure;
          
          }
          /* Enable debugging: save messages and log to directory ./adimat.  */
          else if (strcmp (long_options[option_index].name, "debug") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->debug_flag), 0, &(args_info->debug_given),
                &(local_args_info.debug_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "debug", '-',
                additional_error))
              goto failure;
          
          }
          /* Directory for client user configuration and state.  */
          else if (strcmp (long_options[option_index].name, "user-dir") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->user_dir_arg), 
                 &(args_info->user_dir_orig), &(args_info->user_dir_given),
                &(local_args_info.user_dir_given), optarg, 0, "${HOME}/.adimat", ARG_STRING,
                check_ambiguity, override, 0, 0,
                "user-dir", '-',
                additional_error))
              goto failure;
          
          }
          /* List available toolchains.  */
          else if (strcmp (long_options[option_index].name, "list-tool-chains") == 0)
          {
            args_info->Toolchain_mode_counter += 1;
          
          
            if (update_arg((void *)&(args_info->list_tool_chains_flag), 0, &(args_info->list_tool_chains_given),
                &(local_args_info.list_tool_chains_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "list-tool-chains", '-',
                additional_error))
              goto failure;
          
          }
          /* Get server version.  */
          else if (strcmp (long_options[option_index].name, "server-version") == 0)
          {
            args_info->version_mode_counter += 1;
          
          
            if (update_arg((void *)&(args_info->server_version_flag), 0, &(args_info->server_version_given),
                &(local_args_info.server_version_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "server-version", '-',
                additional_error))
              goto failure;
          
          }
          /* Output received files to console.  */
          else if (strcmp (long_options[option_index].name, "stdout") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->stdout_flag), 0, &(args_info->stdout_given),
                &(local_args_info.stdout_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "stdout", '-',
                additional_error))
              goto failure;
          
          }
          /* Do not ask before sending files over the net.  */
          else if (strcmp (long_options[option_index].name, "interactive") == 0)
          {
          
            if (update_multiple_arg_temp(&interactive_list, 
                &(local_args_info.interactive_given), optarg, 0, "0", ARG_INT,
                "interactive", '-',
                additional_error))
              goto failure;
          
          }
          /* The URL to connect to.  */
          else if (strcmp (long_options[option_index].name, "server") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->server_arg), 
                 &(args_info->server_orig), &(args_info->server_given),
                &(local_args_info.server_given), optarg, 0, "https://adimat.sc.informatik.tu-darmstadt.de/", ARG_STRING,
                check_ambiguity, override, 0, 0,
                "server", '-',
                additional_error))
              goto failure;
          
          }
          /* The host to connect to.  */
          else if (strcmp (long_options[option_index].name, "hostname") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->hostname_arg), 
                 &(args_info->hostname_orig), &(args_info->hostname_given),
                &(local_args_info.hostname_given), optarg, 0, "adimat.sc.informatik.tu-darmstadt.de", ARG_STRING,
                check_ambiguity, override, 0, 0,
                "hostname", '-',
                additional_error))
              goto failure;
          
          }
          /* The relative path of the CGI on server (without base path).  */
          else if (strcmp (long_options[option_index].name, "cgi-path") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->cgi_path_arg), 
                 &(args_info->cgi_path_orig), &(args_info->cgi_path_given),
                &(local_args_info.cgi_path_given), optarg, 0, "cgi-bin/adimat-server.fcgi", ARG_STRING,
                check_ambiguity, override, 0, 0,
                "cgi-path", '-',
                additional_error))
              goto failure;
          
          }
          /* The relative path of the CGI on server.  */
          else if (strcmp (long_options[option_index].name, "request-path") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->request_path_arg), 
                 &(args_info->request_path_orig), &(args_info->request_path_given),
                &(local_args_info.request_path_given), optarg, 0, "/cgi-bin/adimat-server.fcgi", ARG_STRING,
                check_ambiguity, override, 0, 0,
                "request-path", '-',
                additional_error))
              goto failure;
          
          }
          /* No DNS resolution.  */
          else if (strcmp (long_options[option_index].name, "numeric-host") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->numeric_host_flag), 0, &(args_info->numeric_host_given),
                &(local_args_info.numeric_host_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "numeric-host", '-',
                additional_error))
              goto failure;
          
          }
          /* No resolution of service names.  */
          else if (strcmp (long_options[option_index].name, "numeric-port") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->numeric_port_flag), 0, &(args_info->numeric_port_given),
                &(local_args_info.numeric_port_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "numeric-port", '-',
                additional_error))
              goto failure;
          
          }
          /* Don't retrieve canonical host name.  */
          else if (strcmp (long_options[option_index].name, "no-canonical-host-name") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->no_canonical_host_name_flag), 0, &(args_info->no_canonical_host_name_given),
                &(local_args_info.no_canonical_host_name_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "no-canonical-host-name", '-',
                additional_error))
              goto failure;
          
          }
          /* Use IPv4 only.  */
          else if (strcmp (long_options[option_index].name, "ipv4") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->ipv4_flag), 0, &(args_info->ipv4_given),
                &(local_args_info.ipv4_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "ipv4", '-',
                additional_error))
              goto failure;
          
          }
          /* Use IPv6 only.  */
          else if (strcmp (long_options[option_index].name, "ipv6") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->ipv6_flag), 0, &(args_info->ipv6_given),
                &(local_args_info.ipv6_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "ipv6", '-',
                additional_error))
              goto failure;
          
          }
          /* Set a CGI parameter.  */
          else if (strcmp (long_options[option_index].name, "cgi-param") == 0)
          {
          
            if (update_multiple_arg_temp(&cgi_param_list, 
                &(local_args_info.cgi_param_given), optarg, 0, 0, ARG_STRING,
                "cgi-param", '-',
                additional_error))
              goto failure;
          
          }
          /* Do not use SSL.  */
          else if (strcmp (long_options[option_index].name, "no-ssl") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->no_ssl_flag), 0, &(args_info->no_ssl_given),
                &(local_args_info.no_ssl_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "no-ssl", '-',
                additional_error))
              goto failure;
          
          }
          /* Where to read SSL random seed from.  */
          else if (strcmp (long_options[option_index].name, "seed-file") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->seed_file_arg), 
                 &(args_info->seed_file_orig), &(args_info->seed_file_given),
                &(local_args_info.seed_file_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "seed-file", '-',
                additional_error))
              goto failure;
          
          }
          /* Where to read certificates from.  */
          else if (strcmp (long_options[option_index].name, "trust-store") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->trust_store_arg), 
                 &(args_info->trust_store_orig), &(args_info->trust_store_given),
                &(local_args_info.trust_store_given), optarg, 0, "${HOME}/.adimat/adimat.pem", ARG_STRING,
                check_ambiguity, override, 0, 0,
                "trust-store", '-',
                additional_error))
              goto failure;
          
          }
          /* Which ciphers to use, see ciphers(1) for details.  */
          else if (strcmp (long_options[option_index].name, "ciphers") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->ciphers_arg), 
                 &(args_info->ciphers_orig), &(args_info->ciphers_given),
                &(local_args_info.ciphers_given), optarg, 0, "HIGH", ARG_STRING,
                check_ambiguity, override, 0, 0,
                "ciphers", '-',
                additional_error))
              goto failure;
          
          }
          /* Whether to check the server's certificate.  */
          else if (strcmp (long_options[option_index].name, "check-certificate") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->check_certificate_flag), 0, &(args_info->check_certificate_given),
                &(local_args_info.check_certificate_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "check-certificate", '-',
                additional_error))
              goto failure;
          
          }
          /* Whether to check the server's certificate common name (CN).  */
          else if (strcmp (long_options[option_index].name, "check-certificate-name") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->check_certificate_name_flag), 0, &(args_info->check_certificate_name_given),
                &(local_args_info.check_certificate_name_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "check-certificate-name", '-',
                additional_error))
              goto failure;
          
          }
          /* How often to try to reconnect.  */
          else if (strcmp (long_options[option_index].name, "max-reconnect") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->max_reconnect_arg), 
                 &(args_info->max_reconnect_orig), &(args_info->max_reconnect_given),
                &(local_args_info.max_reconnect_given), optarg, 0, "10", ARG_INT,
                check_ambiguity, override, 0, 0,
                "max-reconnect", '-',
                additional_error))
              goto failure;
          
          }
          /* Set HTTP protocol version.  */
          else if (strcmp (long_options[option_index].name, "http-version") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->http_version_arg), 
                 &(args_info->http_version_orig), &(args_info->http_version_given),
                &(local_args_info.http_version_given), optarg, 0, "1.1", ARG_STRING,
                check_ambiguity, override, 0, 0,
                "http-version", '-',
                additional_error))
              goto failure;
          
          }
          /* Set HTTP request method.  */
          else if (strcmp (long_options[option_index].name, "request-method") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->request_method_arg), 
                 &(args_info->request_method_orig), &(args_info->request_method_given),
                &(local_args_info.request_method_given), optarg, 0, "POST", ARG_STRING,
                check_ambiguity, override, 0, 0,
                "request-method", '-',
                additional_error))
              goto failure;
          
          }
          /* Send additional HTTP header.  */
          else if (strcmp (long_options[option_index].name, "header") == 0)
          {
          
            if (update_multiple_arg_temp(&header_list, 
                &(local_args_info.header_given), optarg, 0, 0, ARG_STRING,
                "header", '-',
                additional_error))
              goto failure;
          
          }
          /* Winsock DLL major version number.  */
          else if (strcmp (long_options[option_index].name, "winsock-major") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->winsock_major_arg), 
                 &(args_info->winsock_major_orig), &(args_info->winsock_major_given),
                &(local_args_info.winsock_major_given), optarg, 0, "2", ARG_INT,
                check_ambiguity, override, 0, 0,
                "winsock-major", '-',
                additional_error))
              goto failure;
          
          }
          /* Winsock DLL minor version number.  */
          else if (strcmp (long_options[option_index].name, "winsock-minor") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->winsock_minor_arg), 
                 &(args_info->winsock_minor_orig), &(args_info->winsock_minor_given),
                &(local_args_info.winsock_minor_given), optarg, 0, "2", ARG_INT,
                check_ambiguity, override, 0, 0,
                "winsock-minor", '-',
                additional_error))
              goto failure;
          
          }
          
          break;
        case '?':	/* Invalid option.  */
          /* `getopt_long' already printed an error message.  */
          goto failure;

        default:	/* bug: option not considered.  */
          fprintf (stderr, "%s: option unknown: %c%s\n", CMDLINE_PARSER_PACKAGE, c, (additional_error ? additional_error : ""));
          abort ();
        } /* switch */
    } /* while */


  multiple_default_value.int_arg = 5;
  update_multiple_arg((void *)&(args_info->verbose_arg),
    &(args_info->verbose_orig), args_info->verbose_given,
    local_args_info.verbose_given, &multiple_default_value,
    ARG_INT, verbose_list);
  update_multiple_arg((void *)&(args_info->interactive_arg),
    &(args_info->interactive_orig), args_info->interactive_given,
    local_args_info.interactive_given, 0,
    ARG_INT, interactive_list);
  multiple_default_value.default_string_arg = ".";
  update_multiple_arg((void *)&(args_info->output_dir_arg),
    &(args_info->output_dir_orig), args_info->output_dir_given,
    local_args_info.output_dir_given, &multiple_default_value,
    ARG_STRING, output_dir_list);
  update_multiple_arg((void *)&(args_info->include_dir_arg),
    &(args_info->include_dir_orig), args_info->include_dir_given,
    local_args_info.include_dir_given, 0,
    ARG_STRING, include_dir_list);
  update_multiple_arg((void *)&(args_info->transformation_param_arg),
    &(args_info->transformation_param_orig), args_info->transformation_param_given,
    local_args_info.transformation_param_given, 0,
    ARG_STRING, transformation_param_list);
  update_multiple_arg((void *)&(args_info->comments_arg),
    &(args_info->comments_orig), args_info->comments_given,
    local_args_info.comments_given, 0,
    ARG_INT, comments_list);
  update_multiple_arg((void *)&(args_info->cgi_param_arg),
    &(args_info->cgi_param_orig), args_info->cgi_param_given,
    local_args_info.cgi_param_given, 0,
    ARG_STRING, cgi_param_list);
  update_multiple_arg((void *)&(args_info->header_arg),
    &(args_info->header_orig), args_info->header_given,
    local_args_info.header_given, 0,
    ARG_STRING, header_list);

  args_info->verbose_given += local_args_info.verbose_given;
  local_args_info.verbose_given = 0;
  args_info->interactive_given += local_args_info.interactive_given;
  local_args_info.interactive_given = 0;
  args_info->output_dir_given += local_args_info.output_dir_given;
  local_args_info.output_dir_given = 0;
  args_info->include_dir_given += local_args_info.include_dir_given;
  local_args_info.include_dir_given = 0;
  args_info->transformation_param_given += local_args_info.transformation_param_given;
  local_args_info.transformation_param_given = 0;
  args_info->comments_given += local_args_info.comments_given;
  local_args_info.comments_given = 0;
  args_info->cgi_param_given += local_args_info.cgi_param_given;
  local_args_info.cgi_param_given = 0;
  args_info->header_given += local_args_info.header_given;
  local_args_info.header_given = 0;
  
  if (args_info->Toolchain_mode_counter && args_info->classic_fm_mode_counter) {
    int Toolchain_given[] = {args_info->tool_chain_given, args_info->list_tool_chains_given,  -1};
    const char *Toolchain_desc[] = {"--tool-chain", "--list-tool-chains",  0};
    int classic_fm_given[] = {args_info->classic_forward_given,  -1};
    const char *classic_fm_desc[] = {"--classic-forward",  0};
    error += check_modes(Toolchain_given, Toolchain_desc, classic_fm_given, classic_fm_desc);
  }
  if (args_info->Toolchain_mode_counter && args_info->fm_mode_counter) {
    int Toolchain_given[] = {args_info->tool_chain_given, args_info->list_tool_chains_given,  -1};
    const char *Toolchain_desc[] = {"--tool-chain", "--list-tool-chains",  0};
    int fm_given[] = {args_info->forward_given,  -1};
    const char *fm_desc[] = {"--forward",  0};
    error += check_modes(Toolchain_given, Toolchain_desc, fm_given, fm_desc);
  }
  if (args_info->Toolchain_mode_counter && args_info->rm_mode_counter) {
    int Toolchain_given[] = {args_info->tool_chain_given, args_info->list_tool_chains_given,  -1};
    const char *Toolchain_desc[] = {"--tool-chain", "--list-tool-chains",  0};
    int rm_given[] = {args_info->reverse_given,  -1};
    const char *rm_desc[] = {"--reverse",  0};
    error += check_modes(Toolchain_given, Toolchain_desc, rm_given, rm_desc);
  }
  if (args_info->Toolchain_mode_counter && args_info->taylor_mode_counter) {
    int Toolchain_given[] = {args_info->tool_chain_given, args_info->list_tool_chains_given,  -1};
    const char *Toolchain_desc[] = {"--tool-chain", "--list-tool-chains",  0};
    int taylor_given[] = {args_info->taylor_given,  -1};
    const char *taylor_desc[] = {"--taylor",  0};
    error += check_modes(Toolchain_given, Toolchain_desc, taylor_given, taylor_desc);
  }
  if (args_info->Toolchain_mode_counter && args_info->version_mode_counter) {
    int Toolchain_given[] = {args_info->tool_chain_given, args_info->list_tool_chains_given,  -1};
    const char *Toolchain_desc[] = {"--tool-chain", "--list-tool-chains",  0};
    int version_given[] = {args_info->server_version_given,  -1};
    const char *version_desc[] = {"--server-version",  0};
    error += check_modes(Toolchain_given, Toolchain_desc, version_given, version_desc);
  }
  if (args_info->classic_fm_mode_counter && args_info->fm_mode_counter) {
    int classic_fm_given[] = {args_info->classic_forward_given,  -1};
    const char *classic_fm_desc[] = {"--classic-forward",  0};
    int fm_given[] = {args_info->forward_given,  -1};
    const char *fm_desc[] = {"--forward",  0};
    error += check_modes(classic_fm_given, classic_fm_desc, fm_given, fm_desc);
  }
  if (args_info->classic_fm_mode_counter && args_info->rm_mode_counter) {
    int classic_fm_given[] = {args_info->classic_forward_given,  -1};
    const char *classic_fm_desc[] = {"--classic-forward",  0};
    int rm_given[] = {args_info->reverse_given,  -1};
    const char *rm_desc[] = {"--reverse",  0};
    error += check_modes(classic_fm_given, classic_fm_desc, rm_given, rm_desc);
  }
  if (args_info->classic_fm_mode_counter && args_info->taylor_mode_counter) {
    int classic_fm_given[] = {args_info->classic_forward_given,  -1};
    const char *classic_fm_desc[] = {"--classic-forward",  0};
    int taylor_given[] = {args_info->taylor_given,  -1};
    const char *taylor_desc[] = {"--taylor",  0};
    error += check_modes(classic_fm_given, classic_fm_desc, taylor_given, taylor_desc);
  }
  if (args_info->classic_fm_mode_counter && args_info->version_mode_counter) {
    int classic_fm_given[] = {args_info->classic_forward_given,  -1};
    const char *classic_fm_desc[] = {"--classic-forward",  0};
    int version_given[] = {args_info->server_version_given,  -1};
    const char *version_desc[] = {"--server-version",  0};
    error += check_modes(classic_fm_given, classic_fm_desc, version_given, version_desc);
  }
  if (args_info->fm_mode_counter && args_info->rm_mode_counter) {
    int fm_given[] = {args_info->forward_given,  -1};
    const char *fm_desc[] = {"--forward",  0};
    int rm_given[] = {args_info->reverse_given,  -1};
    const char *rm_desc[] = {"--reverse",  0};
    error += check_modes(fm_given, fm_desc, rm_given, rm_desc);
  }
  if (args_info->fm_mode_counter && args_info->taylor_mode_counter) {
    int fm_given[] = {args_info->forward_given,  -1};
    const char *fm_desc[] = {"--forward",  0};
    int taylor_given[] = {args_info->taylor_given,  -1};
    const char *taylor_desc[] = {"--taylor",  0};
    error += check_modes(fm_given, fm_desc, taylor_given, taylor_desc);
  }
  if (args_info->fm_mode_counter && args_info->version_mode_counter) {
    int fm_given[] = {args_info->forward_given,  -1};
    const char *fm_desc[] = {"--forward",  0};
    int version_given[] = {args_info->server_version_given,  -1};
    const char *version_desc[] = {"--server-version",  0};
    error += check_modes(fm_given, fm_desc, version_given, version_desc);
  }
  if (args_info->rm_mode_counter && args_info->taylor_mode_counter) {
    int rm_given[] = {args_info->reverse_given,  -1};
    const char *rm_desc[] = {"--reverse",  0};
    int taylor_given[] = {args_info->taylor_given,  -1};
    const char *taylor_desc[] = {"--taylor",  0};
    error += check_modes(rm_given, rm_desc, taylor_given, taylor_desc);
  }
  if (args_info->rm_mode_counter && args_info->version_mode_counter) {
    int rm_given[] = {args_info->reverse_given,  -1};
    const char *rm_desc[] = {"--reverse",  0};
    int version_given[] = {args_info->server_version_given,  -1};
    const char *version_desc[] = {"--server-version",  0};
    error += check_modes(rm_given, rm_desc, version_given, version_desc);
  }
  if (args_info->taylor_mode_counter && args_info->version_mode_counter) {
    int taylor_given[] = {args_info->taylor_given,  -1};
    const char *taylor_desc[] = {"--taylor",  0};
    int version_given[] = {args_info->server_version_given,  -1};
    const char *version_desc[] = {"--server-version",  0};
    error += check_modes(taylor_given, taylor_desc, version_given, version_desc);
  }
  
  if (check_required)
    {
      error += cmdline_parser_required2 (args_info, argv[0], additional_error);
    }

  cmdline_parser_release (&local_args_info);

  if ( error )
    return (EXIT_FAILURE);

  if (optind < argc)
    {
      int i = 0 ;
      int found_prog_name = 0;
      /* whether program name, i.e., argv[0], is in the remaining args
         (this may happen with some implementations of getopt,
          but surely not with the one included by gengetopt) */

      i = optind;
      while (i < argc)
        if (argv[i++] == argv[0]) {
          found_prog_name = 1;
          break;
        }
      i = 0;

      args_info->inputs_num = argc - optind - found_prog_name;
      args_info->inputs =
        (char **)(malloc ((args_info->inputs_num)*sizeof(char *))) ;
      while (optind < argc)
        if (argv[optind++] != argv[0])
          args_info->inputs[ i++ ] = gengetopt_strdup (argv[optind-1]) ;
    }

  return 0;

failure:
  free_list (verbose_list, 0 );
  free_list (interactive_list, 0 );
  free_list (output_dir_list, 1 );
  free_list (include_dir_list, 1 );
  free_list (transformation_param_list, 1 );
  free_list (comments_list, 0 );
  free_list (cgi_param_list, 1 );
  free_list (header_list, 1 );
  
  cmdline_parser_release (&local_args_info);
  return (EXIT_FAILURE);
}

#ifndef CONFIG_FILE_LINE_SIZE
#define CONFIG_FILE_LINE_SIZE 2048
#endif
#define ADDITIONAL_ERROR " in configuration file "

#define CONFIG_FILE_LINE_BUFFER_SIZE (CONFIG_FILE_LINE_SIZE+3)
/* 3 is for "--" and "=" */

static int
_cmdline_parser_configfile (const char *filename, int *my_argc)
{
  FILE* file;
  char my_argv[CONFIG_FILE_LINE_BUFFER_SIZE+1];
  char linebuf[CONFIG_FILE_LINE_SIZE];
  int line_num = 0;
  int result = 0, equal;
  char *fopt, *farg;
  char *str_index;
  size_t len, next_token;
  char delimiter;

  if ((file = fopen(filename, "r")) == 0)
    {
      fprintf (stderr, "%s: Error opening configuration file '%s'\n",
               CMDLINE_PARSER_PACKAGE, filename);
      return EXIT_FAILURE;
    }

  while ((fgets(linebuf, CONFIG_FILE_LINE_SIZE, file)) != 0)
    {
      ++line_num;
      my_argv[0] = '\0';
      len = strlen(linebuf);
      if (len > (CONFIG_FILE_LINE_BUFFER_SIZE-1))
        {
          fprintf (stderr, "%s:%s:%d: Line too long in configuration file\n",
                   CMDLINE_PARSER_PACKAGE, filename, line_num);
          result = EXIT_FAILURE;
          break;
        }

      /* find first non-whitespace character in the line */
      next_token = strspn (linebuf, " \t\r\n");
      str_index  = linebuf + next_token;

      if ( str_index[0] == '\0' || str_index[0] == '#')
        continue; /* empty line or comment line is skipped */

      fopt = str_index;

      /* truncate fopt at the end of the first non-valid character */
      next_token = strcspn (fopt, " \t\r\n=");

      if (fopt[next_token] == '\0') /* the line is over */
        {
          farg  = 0;
          equal = 0;
          goto noarg;
        }

      /* remember if equal sign is present */
      equal = (fopt[next_token] == '=');
      fopt[next_token++] = '\0';

      /* advance pointers to the next token after the end of fopt */
      next_token += strspn (fopt + next_token, " \t\r\n");

      /* check for the presence of equal sign, and if so, skip it */
      if ( !equal )
        if ((equal = (fopt[next_token] == '=')))
          {
            next_token++;
            next_token += strspn (fopt + next_token, " \t\r\n");
          }
      str_index  += next_token;

      /* find argument */
      farg = str_index;
      if ( farg[0] == '\"' || farg[0] == '\'' )
        { /* quoted argument */
          str_index = strchr (++farg, str_index[0] ); /* skip opening quote */
          if (! str_index)
            {
              fprintf
                (stderr,
                 "%s:%s:%d: unterminated string in configuration file\n",
                 CMDLINE_PARSER_PACKAGE, filename, line_num);
              result = EXIT_FAILURE;
              break;
            }
        }
      else
        { /* read up the remaining part up to a delimiter */
          next_token = strcspn (farg, " \t\r\n#\'\"");
          str_index += next_token;
        }

      /* truncate farg at the delimiter and store it for further check */
      delimiter = *str_index, *str_index++ = '\0';

      /* everything but comment is illegal at the end of line */
      if (delimiter != '\0' && delimiter != '#')
        {
          str_index += strspn(str_index, " \t\r\n");
          if (*str_index != '\0' && *str_index != '#')
            {
              fprintf
                (stderr,
                 "%s:%s:%d: malformed string in configuration file\n",
                 CMDLINE_PARSER_PACKAGE, filename, line_num);
              result = EXIT_FAILURE;
              break;
            }
        }

    noarg:
      if (!strcmp(fopt,"include")) {
        if (farg && *farg) {
          result = _cmdline_parser_configfile(farg, my_argc);
        } else {
          fprintf(stderr, "%s:%s:%d: include requires a filename argument.\n",
                  CMDLINE_PARSER_PACKAGE, filename, line_num);
        }
        continue;
      }
      len = strlen(fopt);
      strcat (my_argv, len > 1 ? "--" : "-");
      strcat (my_argv, fopt);
      if (len > 1 && ((farg && *farg) || equal))
        strcat (my_argv, "=");
      if (farg && *farg)
        strcat (my_argv, farg);
      ++(*my_argc);

      cmd_line_list_tmp = (struct line_list *) malloc (sizeof (struct line_list));
      cmd_line_list_tmp->next = cmd_line_list;
      cmd_line_list = cmd_line_list_tmp;
      cmd_line_list->string_arg = gengetopt_strdup(my_argv);
    } /* while */

  if (file)
    fclose(file);
  return result;
}

int
cmdline_parser_configfile (
  const char *filename,
                           struct gengetopt_args_info *args_info,
                           int override, int initialize, int check_required)
{
  struct cmdline_parser_params params;

  params.override = override;
  params.initialize = initialize;
  params.check_required = check_required;
  params.check_ambiguity = 0;
  params.print_errors = 1;
  
  return cmdline_parser_config_file (filename, args_info, &params);
}

int
cmdline_parser_config_file (const char *filename,
                           struct gengetopt_args_info *args_info,
                           struct cmdline_parser_params *params)
{
  int i, result;
  int my_argc = 1;
  char **my_argv_arg;
  char *additional_error;

  /* store the program name */
  cmd_line_list_tmp = (struct line_list *) malloc (sizeof (struct line_list));
  cmd_line_list_tmp->next = cmd_line_list;
  cmd_line_list = cmd_line_list_tmp;
  cmd_line_list->string_arg = gengetopt_strdup (CMDLINE_PARSER_PACKAGE);

  result = _cmdline_parser_configfile(filename, &my_argc);

  if (result != EXIT_FAILURE) {
    my_argv_arg = (char **) malloc((my_argc+1) * sizeof(char *));
    cmd_line_list_tmp = cmd_line_list;

    for (i = my_argc - 1; i >= 0; --i) {
      my_argv_arg[i] = cmd_line_list_tmp->string_arg;
      cmd_line_list_tmp = cmd_line_list_tmp->next;
    }

    my_argv_arg[my_argc] = 0;

    additional_error = (char *)malloc(strlen(filename) + strlen(ADDITIONAL_ERROR) + 1);
    strcpy (additional_error, ADDITIONAL_ERROR);
    strcat (additional_error, filename);
    result =
      cmdline_parser_internal (my_argc, my_argv_arg, args_info,
                              params,
                              additional_error);

    free (additional_error);
    free (my_argv_arg);
  }

  free_cmd_list();
  return result;
}
